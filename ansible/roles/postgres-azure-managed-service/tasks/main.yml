- name: ensure backup dir exists
  file: path="{{ postgresql_backup_dir }}" state=directory owner={{ postgresql_user }} group={{ postgresql_user }}

- set_fact:
    postgresql_backup_gzip_file_name: "postgresql_backup_{{ lookup('pipe', 'date +%Z-%Y-%m-%d-%H-%M-%S') }}"

- set_fact:
    postgresql_backup_gzip_file_path: "{{ postgresql_backup_dir }}/{{ postgresql_backup_gzip_file_name }}.zip"

- name: Save backup
  command: export PGPASSWORD="{{postgres-password}}"; pg_dump -U {{ postgres_admin_user }} -h {{ postgres_hostname }} -p 5432 -P {{ }} {{ item }} > {{ item }}.sql
  become_user: "{{ postgresql_user }}"
  with_items: "{{ db_name.db }}"
  args:
    chdir: "{{ postgresql_backup_dir }}"
  async: 3600
  poll: 10

- name: Create archive of backup directory
  archive: path="{{ postgresql_backup_dir }}/" dest="{{ postgresql_backup_dir }}/{{ postgresql_backup_gzip_file_name }}.zip" format=zip

- name: Ensure azure blob storage container exists
  command: az storage container create  --name {{ postgresql_backup_azure_container_name }}
  ignore_errors: true
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ backup_azure_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ backup_azure_storage_access_key }}"

- name: Upload to azure blob storage
  command: az storage blob upload --name {{ postgresql_backup_gzip_file_name }} --file {{ postgresql_backup_gzip_file_path }} --container-name {{ postgresql_backup_azure_container_name }}
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ backup_azure_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ backup_azure_storage_access_key }}"
  async: 3600
  poll: 10

- name: clean up backup dir after upload
  file: path="{{ postgresql_backup_dir }}" state=absent