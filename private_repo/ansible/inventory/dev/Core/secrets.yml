core_vault_sunbird_encryption_key:       #Random hash to encrypt data
core_vault_postgres_password:       #update same password in dp secrets dp_vault_pgdb_admin_password  variable
core_vault_dp_pgdb_password:        #update same password in dp secrets dp_vault_pgdb_password  variable       
core_vault_sunbird_azure_storage_key : 
core_vault_docker_registry_url: "https://index.docker.io/v1" # use this value if using dockerhub
core_vault_docker_registry_user:  
core_vault_docker_registry_password: 

core_vault_proxy_site_key: |+

core_vault_proxy_site_crt: |+

core_vault_sunbird_sso_publickey:  # Get After Keycloak Deployment
core_vault_sunbird_api_auth_token: #Take the jwt token api-admin from Jenkins job OnboardConsumers and update core_vault_sunbird_api_auth_token if using KP and DP along with core

core_vault_enc_entry_password: test # encryption password for the enc service
core_vault_enc_master_pass: test # encryption password for the keys

# Run the below command in shell
#
# date +'%Y-%m-%dT%H:%m:%SZ' -d '+1 year'
# sas_token=?`az storage account generate-sas --account-name "{{ azure_plugin_storage_account_name }}" --account-key "{{ azure_plugin_storage_account_key }}" --expiry $sas_expire_time --https-only --permissions acdlpruw --resource-types sco --services bfqt | xargs`
#
# generate a sas for the blob for entire storage accout with write and read access
artifact_azure_account_sas: # generate a sas for the blob for entire storage accout with write and read access.
sunbird_artifact_storage_account_sas:
sunbird_public_storage_account_sas:
# public storage account with content conatiner.
sunbird_azure_public_storage_account_key:
sunbird_public_storage_account_key:

# Used to store the private contents of the storage account.
sunbird_azure_private_storage_account_key:
sunbird_private_storage_account_key:

# used to store backups for or application DB's
sunbird_azure_management_storage_account_key:

# This account need to be private to store jenkins build artifacts which will be used commonly between environments.
sunbird_azure_artifact_storage_account_key:

# mongodb keyfile content generated using
# 'openssl rand -base64 741'
# eg:
# mongodb_keyfile_content: |
#   dzKXABmKNvuhvsbQud1jn84BMrRJdJb92TQbDV+HVAQXt1ATBssnTIJp6DtL1c/H
#   GHjoOQBuDv1MfymFWxE10dXBlx1IG/pQDeTtC+AOrgyYvIQZNfxHIEfyLao14ZLT
#   8sV6GAlQQzJFSHGqg174iniZpiibuj8Q7zqGlJgu/4MwcOBSflTlcCbYjkBErBff
#   +XBi7hNNcPfIizB6XuYwsY59XCLH/g2S3g9aitbunyCAAQUpyFfnOvMezliFlDDh
#   surRP/lpZ1ZzHtLni2Og8dbOj4J7TLauESd/8Bq+jLzhtBpVn0HoxxF5Se/++z+I
#   ZfK4fSR2y2uyBSbQJmGZYnlRi4iTN/LGpSg2iZVzOQhUUBvBgYdWSkkYLbl2xTni
#   d+BbwGnuvSs1gPXaokKqS6IF9zUGK9V2aW0a9qRHGjv3fJXQqB7zRvc1ciJjUwpI
#   ISsbvlxmZLeDvnQJB3evf/7itSLqNwxMDybn28Ig0E5xBqGCcFbjNjvkkyZPf3YX
#   +nI/gkSLYCPTFsnFaJSBrRxMn6c4iOwU1zc7GAg9KUuqF/ttLv8SZuooRsEZQsif
#   zrxXgUHoqkx0WDZiwz91D3VD4hjwSWa3TLEFy8R9ZeSLv0sDihKlPYvW9HlQuUV8
#   O//HoEA0ajQxjRvJdTskYK6nESOrr+geM477D5Dp3ZKl01ak0HHseJGcoHoMdZOW
#   dcvAhtKZogLstrT1+qftJcsTAOMWsF4EkpoyPelutEyLrLjfzzSUKlb06x2lKxBt
#   NoOUHRhhEXe42QMSMYgtT8wE+/LfeB5IMOP1CiC1dGxBjZkZTtSYTSbcB+52H4xi
#   LhTTEp59/yS6InuJUB6ZzgLGhJoCVg8ZSgSbnngy6Yc4lJpRONlzP7l6A/ins0aA
#   6PvGBWyEAP+P+6xNVpDkrUPKVIFZDfMMCLVm1sicOgtEBInEpeqhiOygnpO5u12P
#   IeDCClMkUbhtwTpgVszUe4OA2EXo
mongodb_keyfile_content: |

## Nodebb admin user password
# This is getting used in /discussions
# use below command to use a random password
# 'openssl rand -hex 10'
nodebb_admin_password:
adminutil_refresh_token_public_key_kid: ""   # get after keycloak deployment, go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/keys and use the Kid of the RS256 token
#SELECT value FROM component_config CC INNER JOIN component C ON(CC.component_id = C.id) WHERE C.realm_id = 'sunbird' and provider_id = 'hmac-generated' AND CC.name = 'secret';
adminutil_refresh_token_secret_key: ""  # get after Keycloak deployment from postgres using the above query

# Steps to generating the Nodebb auth token
# 1. Login to Nodebb (https://<domain-name>/discussions/login) as a Admin.
# 2. go to admin panel.
# 3. click on Plugins => Write API
# 4. Under MASTER TOKENS section, click on create token button, It will generate a token.
discussionsmw_nodebb_authorization_token:

core_vault_proxy_prometheus_admin_creds: "admin"
core_vault_postgres_username: postgres  # dont change this value
core_vault_grafana_editor_password: "sunbird"
core_vault_grafana_dashboards_git_repo_url_with_credentails: "https://github.com/project-sunbird/grafana-dashboards.git"
core_vault_monitor_alerts_slack_url: ""   # Slack webhook for alerts from alertmanager

core_vault_sunbird_google_oauth_clientSecret:
core_vault_mail_server_password: ""
core_vault_keycloak_api_management_user_password: admin
core_vault_keystore_password: sunbird  #Password to use for encrypting cassandra keystore. Use a strong password.
vault_core_url_shortner_access_token: "" # Url shortner access token for learning-service; only if url_shortner enabled
core_vault_sunbird_sso_username: admin
core_vault_sunbird_sso_password: admin
core_vault_keycloak_password: admin
core_vault_grafana_admin_password: sunbird
core_vault_truststore_password: sunbird # Password for cassandra trust store
core_vault_trampoline_secret: "deep-secret" ## keycloak trampoline client secret
core_vault_trampoline_android_secret: "deep-secret" ## keycloak trampoline-android client secret
core_vault_trampoline_desktop_secret: "deep-secret" ## keycloak trampoline-desktop client secret
core_vault_google_auth_secret: "deep-secret"    ## keycloak google-auth client secret
core_vault_nodebb_secret: "deep-secret"    ## keycloak nodebb client secret
core_vault_android_secret: "deep-secret"    ## keycloak android client secret
core_vault_desktop_secret: "deep-secret"    ## keycloak desktop client secret
core_vault_google_android_secret: "deep-secret"    ## keycloak google auth android client secret
core_vault_google_desktop_secret: "deep-secret"    ## keycloak google auth desktop client secret
core_vault_sunbird_sso_client_secret: "deep-secret"  ## keycloak lms client secret
core_vault_sunbird_google_keycloak_secret: "{{ core_vault_google_auth_secret }}" # keycloak google-auth client secret for portal
core_vault_sunbird_keycloak_user_federation_provider_id: "keycloak-cassandra-user-federation"   # we are generating a default as part of bootstrap for keycloak upgrade 3.7.0
core_vault_msg_91_auth_key:

# Portal one google sso
core_vault_sunbird_google_oauth_clientId_portal:
core_vault_sunbird_google_oauth_clientSecret_portal:
core_vault_sunbird_google_captcha_site_key_portal:

# Oauth for logger kibana
core_vault_kibana_google_client_id:
core_vault_kibana_google_client_secret:
core_vault_kibana_cookie_secret: kibanaoauth # Cookie secret for kibana Oauth

### You can leave these as defaults  ###
dp_play_http_secret_key: "long-secret-to-calm-entropy-gods" # can be any random string, it's not necessary need to change this
core_vault_graph_passport_key: "long-secret-to-calm-entropy-gods" # should be same as lp_vault_graph_passport_key from KnowledgePlatform/Secrets.yml, it's not necessary need to change this
# sunbird session secret key
# Changing the secret value will invalidate all existing sessions.
# In order to rotate the secret without invalidating sessions, provide an array of secrets,
# with the new secret as first element of the array, and followed by previous secrets.
sunbird_portal_session_secret: "long-secret-to-calm-entropy-gods"  # Any long alphanumeric string
crypto_encryption_key: "long-secret-to-calm-entropy-gods" # any crypto key of 32 bit length, used by portal to encrypt and decrypt the userDetails for forgot password flow
sunbird_api_auth_token_bot: "{{ core_vault_sunbird_api_auth_token }}"
